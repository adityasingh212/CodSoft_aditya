Task 2 :- Implement an AI agent that plays the classic game of Tic-Tac-Toe against a human player. You can use algorithms like Minimax with or without Alpha-Beta Pruning to make the AI player unbeatable.
 
Code Implementation :-
 
import math
def print_board(board):
   """Print the current state of the board."""
   for row in board:
       print("|".join(row))
       print("-" * 5)
 
def check_winner(board):
   """Check if there's a winner or if the game is a draw."""
   # Check rows, columns, and diagonals
   for i in range(3):
       if board[i][0] == board[i][1] == board[i][2] and board[i][0] != " ":
           return board[i][0]
       if board[0][i] == board[1][i] == board[2][i] and board[0][i] != " ":
           return board[0][i]
   
   if board[0][0] == board[1][1] == board[2][2] and board[0][0] != " ":
       return board[0][0]
   if board[0][2] == board[1][1] == board[2][0] and board[0][2] != " ":
       return board[0][2]
 
   # Check for a draw
   if all(cell != " " for row in board for cell in row):
       return "Draw"
 
   return None
 
def minimax(board, is_maximizing, alpha=-math.inf, beta=math.inf):
   """Minimax algorithm with Alpha-Beta pruning."""
   winner = check_winner(board)
   if winner == "X":  # AI wins
       return 1
   elif winner == "O":  # Human wins
       return -1
   elif winner == "Draw":  # It's a draw
       return 0
 
   if is_maximizing:
       best_score = -math.inf
       for i in range(3):
           for j in range(3):
               if board[i][j] == " ":
                   board[i][j] = "X"
                   score = minimax(board, False, alpha, beta)
                   board[i][j] = " "
                   best_score = max(best_score, score)
                   alpha = max(alpha, best_score)
                   if beta <= alpha:
                       break
       return best_score
   else:
       best_score = math.inf
       for i in range(3):
           for j in range(3):
               if board[i][j] == " ":
                   board[i][j] = "O"
                   score = minimax(board, True, alpha, beta)
                   board[i][j] = " "
                   best_score = min(best_score, score)
                   beta = min(beta, best_score)
                   if beta <= alpha:
                       break
       return best_score
 
def ai_move(board):
   """Determine the AI's optimal move."""
   best_score = -math.inf
   best_move = None
   for i in range(3):
       for j in range(3):
           if board[i][j] == " ":
               board[i][j] = "X"
               score = minimax(board, False)
               board[i][j] = " "
               if score > best_score:
                   best_score = score
                   best_move = (i, j)
   return best_move
 
def play_game():
   """Main function to play Tic-Tac-Toe."""
   board = [[" " for _ in range(3)] for _ in range(3)]
   print("Welcome to Tic-Tac-Toe! You are 'O', and the AI is 'X'.")
   print_board(board)
 
   while True:
       # Human move
       while True:
           try:
               row, col = map(int, input("Enter your move (row and column: 0, 1, or 2, separated by a space): ").split())
               if board[row][col] == " ":
                   board[row][col] = "O"
                   break
               else:
                   print("Cell is already occupied. Try again.")
           except (ValueError, IndexError):
               print("Invalid input. Enter row and column numbers between 0 and 2.")
 
       print("Your move:")
       print_board(board)
 
       # Check for winner
       if check_winner(board):
           break
 
       # AI move
       print("AI's move:")
       move = ai_move(board)
       if move:
           board[move[0]][move[1]] = "X"
       print_board(board)
 
       # Check for winner
       if check_winner(board):
           break
 
   # Game result
   result = check_winner(board)
   if result == "Draw":
       print("It's a draw!")
   else:
       print(f"{result} wins!")
 
if __name__ == "__main__":
   play_game()
